{
    "language": "python",
    "variables": [
        {
            "name": "num1",
            "value": "num1",
            "type": "unknown"
        },
        {
            "name": "num2",
            "value": "num2",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "input(\"Enter choice (1/2/3/4/5/6/7/8): \")",
            "type": "unknown"
        },
        {
            "name": "num1",
            "value": "float(input(\"Enter the first number: \"))",
            "type": "unknown"
        },
        {
            "name": "num2",
            "value": "float(input(\"Enter the second number (if applicable): \"))",
            "type": "unknown"
        },
        {
            "name": "arithmetic",
            "value": "ArithmeticOperations(num1, num2)",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "= '1':",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "= '2':",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "= '3':",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "= '4':",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "= '5':",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "= '6':",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "= '7':",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "= '8':",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "menu()",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "= '8':",
            "type": "unknown"
        },
        {
            "name": "num2",
            "value": "get_input()",
            "type": "unknown"
        },
        {
            "name": "__name__",
            "value": "= \"__main__\":",
            "type": "unknown"
        },
        {
            "name": "num2",
            "value": "None):",
            "type": "unknown"
        },
        {
            "name": "num1",
            "value": "num1",
            "type": "unknown"
        },
        {
            "name": "num2",
            "value": "num2",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "input(\"Enter choice (1/2/3/4/5/6): \")",
            "type": "unknown"
        },
        {
            "name": "num1",
            "value": "float(input(\"Enter a number: \"))",
            "type": "unknown"
        },
        {
            "name": "adv_arithmetic",
            "value": "AdvancedArithmeticOperations(num1)",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "= '1':",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "= '2':",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "= '3':",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "= '4':",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "= '5':",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "= '6':",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "advanced_menu()",
            "type": "unknown"
        },
        {
            "name": "choice",
            "value": "= '6':",
            "type": "unknown"
        },
        {
            "name": "num1",
            "value": "get_advanced_input()",
            "type": "unknown"
        },
        {
            "name": "user_choice",
            "value": "input(\"Choose an option (1/2/3): \")",
            "type": "unknown"
        },
        {
            "name": "user_choice",
            "value": "= '1':",
            "type": "unknown"
        },
        {
            "name": "user_choice",
            "value": "= '2':",
            "type": "unknown"
        },
        {
            "name": "user_choice",
            "value": "= '3':",
            "type": "unknown"
        },
        {
            "name": "__name__",
            "value": "= \"__main__\":",
            "type": "unknown"
        }
    ],
    "data_types": [
        "float",
        "float",
        "int",
        "float"
    ],
    "functions": [
        {
            "name": "__init__",
            "args": [
                "self",
                "num1",
                "num2"
            ],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "add",
            "args": [
                "self"
            ],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "subtract",
            "args": [
                "self"
            ],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "multiply",
            "args": [
                "self"
            ],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "divide",
            "args": [
                "self"
            ],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "modulus",
            "args": [
                "self"
            ],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "power",
            "args": [
                "self"
            ],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "square_root",
            "args": [
                "self"
            ],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "menu",
            "args": [],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "get_input",
            "args": [],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "perform_operation",
            "args": [
                "choice",
                "num1",
                "num2"
            ],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "main",
            "args": [],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "__init__",
            "args": [
                "self",
                "num1",
                "num2=None"
            ],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "factorial",
            "args": [
                "self"
            ],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "log",
            "args": [
                "self"
            ],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "exp",
            "args": [
                "self"
            ],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "sin",
            "args": [
                "self"
            ],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "cos",
            "args": [
                "self"
            ],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "advanced_menu",
            "args": [],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "get_advanced_input",
            "args": [],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "perform_advanced_operation",
            "args": [
                "choice",
                "num1"
            ],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "advanced_operations",
            "args": [],
            "return_statement": null,
            "return_type": "unknown"
        },
        {
            "name": "extended_program",
            "args": [],
            "return_statement": null,
            "return_type": "unknown"
        }
    ],
    "classes": [],
    "imports": [],
    "comments": {
        "single_line_comments": [
            "# Define a class for Arithmetic operations",
            "# Method for addition",
            "# Method for subtraction",
            "# Method for multiplication",
            "# Method for division",
            "# Method for modulus",
            "# Method for power",
            "# Method for square root",
            "# Function for a simple menu system",
            "# Function to get user input",
            "# Function to handle operations based on user input",
            "# Main driver function",
            "# Checking if the script is the main module",
            "# Additional classes for extended functionality",
            "# Function to handle additional advanced operations",
            "# Function to get user input for advanced operations",
            "# Function to handle advanced operations",
            "# Main driver for advanced operations",
            "# Additional program flow to enter advanced operations mode",
            "# Call the basic arithmetic operations",
            "# Call the advanced arithmetic operations",
            "# Run the extended program"
        ],
        "multi_line_comments": []
    },
    "operators": [
        "or",
        "or",
        "or",
        "+",
        "or",
        "-",
        "or",
        "*",
        "or",
        "!=",
        "/",
        "or",
        "or",
        "!=",
        "%",
        "or",
        "or",
        "*",
        "*",
        "or",
        ">=",
        "or",
        "or",
        "or",
        "or",
        "/",
        "/",
        "/",
        "/",
        "/",
        "/",
        "/",
        "or",
        "and",
        "or",
        "==",
        "==",
        "==",
        "==",
        "==",
        "==",
        "==",
        "==",
        "!",
        "==",
        "or",
        "!=",
        "and",
        "or",
        "==",
        "or",
        "or",
        "or",
        "or",
        "not",
        "or",
        "or",
        "<=",
        "or",
        "or",
        "and",
        "or",
        "/",
        "/",
        "/",
        "/",
        "/",
        "or",
        "or",
        "and",
        "or",
        "==",
        "or",
        "or",
        "==",
        "==",
        "==",
        "==",
        "==",
        "or",
        "==",
        "or",
        "/",
        "/",
        "==",
        "==",
        "==",
        "=="
    ],
    "control_structures": [
        "for",
        "for",
        "return",
        "for",
        "return",
        "for",
        "return",
        "for",
        "if",
        "return",
        "else",
        "return",
        "for",
        "if",
        "return",
        "else",
        "return",
        "for",
        "return",
        "for",
        "if",
        "return",
        "else",
        "return",
        "for",
        "for",
        "return",
        "try",
        "if",
        "return",
        "except",
        "return",
        "if",
        "elif",
        "elif",
        "elif",
        "elif",
        "elif",
        "elif",
        "elif",
        "else",
        "while",
        "if",
        "break",
        "if",
        "continue",
        "if",
        "if",
        "for",
        "if",
        "return",
        "for",
        "return",
        "if",
        "return",
        "for",
        "return",
        "return",
        "return",
        "return",
        "return",
        "for",
        "try",
        "return",
        "except",
        "return",
        "if",
        "elif",
        "elif",
        "elif",
        "elif",
        "elif",
        "else",
        "for",
        "while",
        "if",
        "break",
        "if",
        "continue",
        "while",
        "if",
        "elif",
        "elif",
        "break",
        "else",
        "if"
    ],
    "multithreading": [],
    "llm_analysis": "LLM-based insights extracted."
}